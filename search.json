[
  {
    "objectID": "pages/getting_started.html",
    "href": "pages/getting_started.html",
    "title": "Overview",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom chrom_windows import window\n\n\ndata = pd.DataFrame({'chrom': ['chr1']+['chr2']*10,\n                    'start': list(range(10)) + [40],\n                    'end': list(map(sum, zip(range(10), [5, 1]*5+[20]))) + [45],\n                   'species': ['human']*5+['chimp']*6, 'run': range(0, 110, 10), 'analysis' : np.linspace(3, 7, 11)})\n\ndata\n\n\n\n\n\n\n\n\nchrom\nstart\nend\nspecies\nrun\nanalysis\n\n\n\n\n0\nchr1\n0\n5\nhuman\n0\n3.0\n\n\n1\nchr2\n1\n2\nhuman\n10\n3.4\n\n\n2\nchr2\n2\n7\nhuman\n20\n3.8\n\n\n3\nchr2\n3\n4\nhuman\n30\n4.2\n\n\n4\nchr2\n4\n9\nhuman\n40\n4.6\n\n\n5\nchr2\n5\n6\nchimp\n50\n5.0\n\n\n6\nchr2\n6\n11\nchimp\n60\n5.4\n\n\n7\nchr2\n7\n8\nchimp\n70\n5.8\n\n\n8\nchr2\n8\n13\nchimp\n80\n6.2\n\n\n9\nchr2\n9\n10\nchimp\n90\n6.6\n\n\n10\nchr2\n40\n45\nchimp\n100\n7.0\n\n\n\n\n\n\n\nMake a function interval_count that is called on the intervals in windows of size 5. Note that the window decorator only handles a single chromosome so you always need to group your data by chromosome:\n\n@window(size=5)\ndef interval_count(df):\n    return len(df.index)\n\ndf = data.groupby('chrom').apply(interval_count)\ndf\n\n\n\n\n\n\n\n\n\nstart\nend\ninterval_count\n\n\nchrom\n\n\n\n\n\n\n\n\nchr1\n0\n0\n5\n1\n\n\nchr2\n0\n0\n5\n4\n\n\n1\n5\n10\n7\n\n\n2\n10\n15\n2\n\n\n3\n15\n20\n0\n\n\n4\n20\n25\n0\n\n\n5\n25\n30\n0\n\n\n6\n30\n35\n0\n\n\n7\n35\n40\n0\n\n\n8\n40\n45\n1\n\n\n\n\n\n\n\nYou can get rid of the extra index like this:\n\ndf.reset_index(drop=True, level=-1)\n\n\n\n\n\n\n\n\nstart\nend\ninterval_count\n\n\nchrom\n\n\n\n\n\n\n\nchr1\n0\n5\n1\n\n\nchr2\n0\n5\n4\n\n\nchr2\n5\n10\n7\n\n\nchr2\n10\n15\n2\n\n\nchr2\n15\n20\n0\n\n\nchr2\n20\n25\n0\n\n\nchr2\n25\n30\n0\n\n\nchr2\n30\n35\n0\n\n\nchr2\n35\n40\n0\n\n\nchr2\n40\n45\n1\n\n\n\n\n\n\n\nYou can further convert the index to colums like this:\n\ndf.reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ninterval_count\n\n\n\n\n0\nchr1\n0\n5\n1\n\n\n1\nchr2\n0\n5\n4\n\n\n2\nchr2\n5\n10\n7\n\n\n3\nchr2\n10\n15\n2\n\n\n4\nchr2\n15\n20\n0\n\n\n5\nchr2\n20\n25\n0\n\n\n6\nchr2\n25\n30\n0\n\n\n7\nchr2\n30\n35\n0\n\n\n8\nchr2\n35\n40\n0\n\n\n9\nchr2\n40\n45\n1\n\n\n\n\n\n\n\nYou can group by more than just the chromosome if you like:\n\ndata.groupby(['chrom', 'species']).apply(interval_count).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nspecies\nstart\nend\ninterval_count\n\n\n\n\n0\nchr1\nhuman\n0\n5\n1\n\n\n1\nchr2\nchimp\n0\n5\n0\n\n\n2\nchr2\nchimp\n5\n10\n5\n\n\n3\nchr2\nchimp\n10\n15\n2\n\n\n4\nchr2\nchimp\n15\n20\n0\n\n\n5\nchr2\nchimp\n20\n25\n0\n\n\n6\nchr2\nchimp\n25\n30\n0\n\n\n7\nchr2\nchimp\n30\n35\n0\n\n\n8\nchr2\nchimp\n35\n40\n0\n\n\n9\nchr2\nchimp\n40\n45\n1\n\n\n10\nchr2\nhuman\n0\n5\n4\n\n\n11\nchr2\nhuman\n5\n10\n2\n\n\n\n\n\n\n\nYou can use hte even keyword to put approximately the same amount of interval in each window (to the extent that this is possible):\n\n@window(size=10)\ndef interval_sum(df):\n    return (df.end-df.start).sum()\n\ndata.groupby('chrom').apply(interval_sum).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ninterval_sum\n\n\n\n\n0\nchr1\n0\n10\n5\n\n\n1\nchr2\n0\n10\n21\n\n\n2\nchr2\n10\n20\n4\n\n\n3\nchr2\n20\n30\n0\n\n\n4\nchr2\n30\n40\n0\n\n\n5\nchr2\n40\n50\n5\n\n\n\n\n\n\n\nYou can return any number of values from your function. Just do so as a Series or a dictionary:\n\n@window(size=10)\ndef multiple_stats(df):\n    # return a Series\n    return df[['analysis','run']].sum()\n\ndata.groupby(['chrom']).apply(multiple_stats).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\nanalysis\nrun\n\n\n\n\n0\nchr1\n0\n10\n3.0\n0.0\n\n\n1\nchr2\n0\n10\n45.0\n450.0\n\n\n2\nchr2\n10\n20\n11.6\n140.0\n\n\n3\nchr2\n20\n30\n0.0\n0.0\n\n\n4\nchr2\n30\n40\n0.0\n0.0\n\n\n5\nchr2\n40\n50\n7.0\n100.0\n\n\n\n\n\n\n\n\n@window(size=10)\ndef multiple_stats(df):\n    # return dictionary\n    return dict(tot_length=(df.end-df.start).sum(), interval_count=len(df), mean_length=(df.end-df.start).mean())\n    \ndata.groupby(['chrom']).apply(multiple_stats).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ntot_length\ninterval_count\nmean_length\n\n\n\n\n0\nchr1\n0\n10\n5\n1\n5.000000\n\n\n1\nchr2\n0\n10\n21\n9\n2.333333\n\n\n2\nchr2\n10\n20\n4\n2\n2.000000\n\n\n3\nchr2\n20\n30\n0\n0\nNaN\n\n\n4\nchr2\n30\n40\n0\n0\nNaN\n\n\n5\nchr2\n40\n50\n5\n1\n5.000000\n\n\n\n\n\n\n\n\n@window(size=100000000, empty=True, fill='hg19')\ndef count1(df):\n    return len(df.index)\n\ndata.groupby('chrom').apply(count1).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ncount1\n\n\n\n\n0\nchr1\n0\n100000000\n1\n\n\n1\nchr1\n100000000\n200000000\n0\n\n\n2\nchr1\n200000000\n300000000\n0\n\n\n3\nchr2\n0\n100000000\n10\n\n\n4\nchr2\n100000000\n200000000\n0\n\n\n5\nchr2\n200000000\n300000000\n0\n\n\n\n\n\n\n\nUse the logbase argument to make windows increase logarithmically with the specified base, starting from size. Usefull if the density of intervals decrease with distance (E.g. reletive to some annotation.)\n\n@window(size=2, logbase=2)\ndef count2(df):\n    return len(df.index)\n\ndata.groupby('chrom').apply(count2).reset_index(drop=True, level=-1).reset_index()\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ncount2\n\n\n\n\n0\nchr1\n0.0\n2.0\n1\n\n\n1\nchr1\n2.0\n6.0\n1\n\n\n2\nchr2\n0.0\n2.0\n1\n\n\n3\nchr2\n2.0\n6.0\n4\n\n\n4\nchr2\n6.0\n14.0\n6\n\n\n5\nchr2\n14.0\n30.0\n0\n\n\n6\nchr2\n30.0\n62.0\n1\n\n\n\n\n\n\n\nIf you get fed up with adding .reset_index(drop=True, level=-1).reset_index() you can make your own reset_index to pipe it trough:\n\ndef reset_group_index(df):\n    return df.reset_index(drop=True, level=-1).reset_index()\n\n\n@window(size=10)\ndef count(df):\n    return len(df.index)\n    \ndata.groupby(['chrom']).apply(count).pipe(reset_group_index)\n\n\n\n\n\n\n\n\nchrom\nstart\nend\ncount\n\n\n\n\n0\nchr1\n0\n10\n1\n\n\n1\nchr2\n0\n10\n9\n\n\n2\nchr2\n10\n20\n2\n\n\n3\nchr2\n20\n30\n0\n\n\n4\nchr2\n30\n40\n0\n\n\n5\nchr2\n40\n50\n1",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "api/index.html",
    "href": "api/index.html",
    "title": "Function reference",
    "section": "",
    "text": "These functions …\n\n\n\nwindow",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/index.html#gene-information",
    "href": "api/index.html#gene-information",
    "title": "Function reference",
    "section": "",
    "text": "These functions …\n\n\n\nwindow",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "api/window.html",
    "href": "api/window.html",
    "title": "window",
    "section": "",
    "text": "window\nchrom_windows.window(\n    size=None,\n    logbase=1,\n    even=None,\n    empty=True,\n    fill=None,\n    start=0,\n)",
    "crumbs": [
      "Gene information",
      "window"
    ]
  }
]